Contents:
* HTML/CSS Review
	~ HTML
	~ CSS
* Bootstrap
* JavaScript
	* Variables
	* Truthy-Falsey
	* Template Litearals
	* Object-Oriented Programming in JS
		~ Inheritance
		~ Polymorphism
		~ Abstraction
		~ Encapsulation
	* Functions
	* Enhanced For Loop
	* Events
	* Working with the DOM
	* Fetch
	* AJAX
V. Java & Connecting
====================================================================
		   * HTML / CSS Review
====================================================================
 ----------------------------~ HTML--------------------------------
- stands for HyperText Markup Language 
- HTML5 (newest version) maintained by W3C WorldWideWeb Consortium.
- Purpose: a symantic language used to describe content.
	- Is interpreted by browsers.
	- is structured by tags
- An element is the documents' representation of the tag and content
- Structure of HTML Document:
	<!DOCTYPE html>
	<html>
	  <head></head>
	  <body></body> 
	</html>
- Rules : 
	- Tags should be void, self-closing, or closed. 
	- If tag is opened within another tag, it must be 
	  closed before another tag closes.

- Attributes: Details about the tag and value.
	Examples: 
		src = "url" Loads external resource
		type, class, id, width, height, href

- DOM - Document Object Model
	- Tree Structure representing the document

			html
			 |
  .-------------------------------------.
  |					|
 head 	                               body
  |          	.---------------------------------------.
 meta		|			|		|
              header          	     article          footer 
         .-----'-.          .-----------|----------.      \
        h1      nav       header     section     section   div 
                          |        / |  |  \ \ \ 
                         ol       h2 p1 h3 p p p 
                        / | \
                      li li li

 --CSS also operations on this tree structure. 
	- This is how it knows which elements to select as children
 body nav {} //searches the body for navs underneath it to affect.

==> Common Tags
> Text
   h1 : header is a primary element used to describe main header 
	regardless of HOW we want it displayed.
   h2-h6 are subheadings
   p : paragrpah
   strong : increase weight of line
   em : italics
>Lists
  ol : ordered (numbered) lists
  ul : unorderd list
     li : list item (nested within list)
  dl : dictionary list
	dt: definition text
> Table
    table
	thead (semantic)
	tbody (semantic)
	tr
	  th
	  td
> External resource
   a (anchor)	<a href="url">Link </a>
   img (image)	<img src="url">
   script (javascript) 
	<script src="url"></script> or <script>JS</script>
   link <link href="css sheet" ref="stylesheet">
>Arbitrary structures (No semantic meaning)
	- Only use if you have no better way to describe the content
	- IE if structure is only for visual reasons.
  div : Block
  span : Inline block
> head
	Link
	meta
	title
> Input
form (Group of inputs that would be sent together.)
	<form method="" >--"get" or "post"
 <fieldset>
	<input type = "..." >
 types : text, button, color, number, check, radio, select, 
         datepicker, password, hidden

 -----------------------------~ CSS--------------------------------
CSS stands for Cascading Stylesheet
- Provides styling rules 
	inline, in style tag, or in a link(extenal)
- Best to use as external
 Form: 			Selector{ property:value;}
 Application:	a {  
		   color : blue; 
		}

==>Types of identifiers:
1. Tag -> h1 {}
2. Class -> .someClass{}
3. Id -> #someId{} 


==> Selector : 
.class1 .class2{} -- "descentant of the element to stylize"
 		  -- selects all class2 in any class1
.class2,class1{}  -- "and" 
		  -- selects both class1 and 2
.class1 > class2{}-- "direct parent of the element to stylize"
		  -- Selects class2 that is a direct child of class1
.class1.class2{}  -- selects only elements with BOTH classes
h2#id		  -- Selects h2 element with the ID my-header

==> Display
block:   by default fills width, creating block on its own line
inline:  diplays on a baseline by default only large enough to
	 fill contents. Can be chained together(potentially 
	 changing the baseline)
flex:    Used to align items/show them in particular ways. 
inline flex, inline-block bombine features

==> Box model
 _ _ _ _ _ _ _ _ __ _ _ __ _ _ _  
|_________________________ Margin|
|| ________________ Border|      |
||| _______ Padding|      |      |
||||Content|       |      |      |
||||_______|       |      |      |
|||________________|      |      |
||________________________|      |
|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |

- Units of size:
%, px, em, rem, vh, vw, vmin, vmax

- Colors:
  Literal - (blue, red, ect)
  hex - #RRGGBB with each character being 0-f representing 256 vals
  rgb / rgba - (n,n,n{,0 <= a <= 1}) where n = [0,255]
  hsl([0,255],%,%);
===================================================================
			* Bootstrap
===================================================================
Getting started: 
http://getbootstrap.com/docs/4.1/getting-started/introduction/

Components : Pre-styled code blocks for a feature
=>Types of Components
Alerts : Text that you can have pop up with optional close buttons.
Carousel : Slide images or things, may includes arrows to switch
	 left/right, captions, different fades.
Buttons : Generally nices looking for buttons.
Navbar : Basic with or without dropdowns
Cards : Very common tool (image with text)

Layout >> Grid:
	- Built on flexbox to be more responsive.
	- Create a container class.
	- inner div specified directly.
	- Inner inner is the content.

In flexbox, page is gridded in 12ths.
<div class="container">
        <div class="row">
            <div class="col-6"></div>
            <div class="col-2"></div>
            <div class="col-4"></div>
        </div>
        <div class="row">
            <div class="col-1"></div>
            <div class="col-10"></div>
            <div class="col-1"></div>
        </div>
        <div class="row">
            <div class="col-4"></div>
            <div class="col-4"></div>
            <div class="col-4"></div>
        </div>
    </div>

Bootstrap Forms are quite common now
- Most modern websites user bootstrap or Google Material Design.

Modals - used a lot for ads (cover screen until it is taken care of)
  such as terms of conditions.

===================================================================
======================= * Javascript ==============================
===================================================================
Javascript History:
	- Orignally created by in 1994 Bredan Eich for new browser
	- Named to piggyback on Java's success
	- Maintained now by ECMA 
	- Purpose : Accessible tool to connect HTML to components
	- Dynamic, weak-typed, prototype-based
	- Can be used like java for applications beside websites

===================================================================
		    * Variables
===================================================================
==> Declaring a variable:
	There are 3 ways to declare a variable:
  1. let myVar;		-Block scope, reassignable variable
  2. const myVar;	-Block-scope, constant (can't be reassigned)
  3. var myVar;		-Hoists variable, reassignable
  4. myVar;		-Creates global variable
==> JS Types
- Weakly Typed : JavaScript variables can be declared without first
	determining the type. They can be reassigned any other type
	without casting issues.
- JavaScript Types
1. String 	- 'single' or "double" quotes work.
		- use \' or \" for quote character
2. Number	- ONLY numberic datatype in JS
		- Floating-point number
3. Boolean	- true/false. true corresponds to 1, false 0
			true == 1;//true
			false == 0;//true
4. Undefined	- Default
5. Null		- Never assigned by JS
6. Symbol	- Represents unique ID
7. Object	- Holds key/value pair (like Java map)
8. Function (NOT a datatype, but a type)

Declaring functions:
	function myFunc() { ... }
	myFunc = function() { ... }
	let myFunc = () => {...}
Equality:
	== <-- compares the value
	=== <-- Compares the value and datatype
==> Scope
1. Global Scope
	- Anywhere in the document the variable can be used.
	- Variables defined without let/var/const become global
	 --they can be used anywhere, even if defined in a function
2. Local Scope / Block Scope
	- Scope within control-flow statement or {}
	- let and const are block-scope
2.5. Function Scope
	- Functions create their own local scope:
	- variables defined with let,var,or const inside a function
	  are not available outside the function
   Example:
	function func() {
		let a = 1;
		const b = 2;
		var c = 3;
		d = 4;
	}
	func();
	a; //error, a is not defined
	b; //error, b is not defined
	c; //error, c is not defined
	d; //4

- Hoisting 
	Hoisting lifts the variable declaration to the top of it's
 scope. This occurs when variables are defined with var&no keyword.
 Example:
	{ {var x = 5} }
	x; //5
===================================================================
		    * Truthy-Falsey
===================================================================
- In Javascript  every value can be evaluated for truthiness. 
- Any value of any time can be utilized in an if statement, a 
  logical argument, ect.
- Most values are considered "truthy", but certain values are falsy
Falsy:
	"" (empty string), 0, null, NaN, undefined

- We can utilize these conditional statements in assignment.
- The variable will be assigned the VALUE that made the difference 
  in the result. 

const y = 0 || x;
		 result >> y = x
const z = NaN && x; 
		 result >> z = NaN

- Useful to resolve if something might be null.

-- Boolean expressions in JavaScript don't necessarily evaluate to a
 true or false value, but instead evaluate to the value in the 
 expression that made the difference in the resulting logical result.
- The logic of this follows short circuit logic closely.

===================================================================
		    * Template Literals
===================================================================
- ES6 Feature of JavaScript. 
- Used for formatting strings, often in place of contatenation

const person = {
	firstName : 'Abby',
	lastName : 'Adams',
	age : 22
};

//We want to print out "my name is Abby adams and I'm 22 years old.
////Concatenation method: 
const str = "My name is " + person.firstName + " " + person.lastName + " and I am " + person.age + " years old";
console.log(str);

// Template literals allow for simpler variable injection.
//////Tamplate literals method
let template = `My name is ${person.firstName} 
${person.lastName} and I'm ${person.age}
 years old.`

//` is a backtick, not a single quote 
//Template literals allow you to throw line breaks in there.
// Break provides actual linebreak. 
//You can escape that with a single backslash where the lines are:

template = `My name is ${person.firstName} \
${person.lastName} and I'm ${person.age}\
 years old.`

==> Arrays
- Can be variable in size and hold any datatype.
- Type of Object, can act like an object as well.

x = [1,2,3];
x[-2] = 'cat';	//<--------------Acceptable declaration!
x; // returns >  [1,2,3, -2: cat];

also:
x['chicken'] = 'cluck';
x.chicken // returns   'cluck';

===================================================================
	       * Object-Oriented Programming in JS
===================================================================
- Recall pillars of OOP
	Absraction
	Polymorphism
	Inheritence
	Encapsulation.

~~~~~~~~~~~~~~~ Inheritance in JavaScript ~~~~~~~~~~~~~~~~~~~~~~~~~
 -- Inheritance can't work like Java. There are no classes.
Java features classical inheritance. Javascript does not have
classes, so it cannot use classical inheritence. Javascript, instead,
uses prototypal inheritance. 
 -- Prototypal inheritence is objects inheriting from other objects. 

-- Objects have a prototype reference to the parent object, generally
with the __PROTO__ field. When we try to access any member that is
not defined on the current object, it attempts to recursively find 
it in the _PROTO__ chain. 

-- The __PROTO__ field is exposed to us so we can easily see it and
 modify it.
-- The old way of extending an object would be to use object.create()

  const Person = {
	firstName: '',
	lastName: '',
	printName: function() {
		console.log(`${this.firstName}  ${this.lastName}`)
	}
  }
  const Abby = object.create(Person);

  abby.__proto__ === Person << true;


  abby.firstName //returns: ''
(If browser doesnt find the first name on Abby, it goes to the 
Proto and giver her that name.)

  Person.firstName = 'nameless'
  abby.firstName //returns 'nameless' 
 		//the proto linked to updated person

-- You can change objects however by changing the __proto__
	const Dog = {
		firstName = 'Spot',
		speak: function() {console.log('bark')}
	}
	abby.__proto__ = Dog

-- You can have objects extend other objects as well.
	let otherAbby = object.create(abby);

-- Can't have cyclic inheritence.
	a.__proto__.__proto__ = a; 
	//would not work

==> Can have constructors 

  const Dog = function(name, speak) {
	this.name = name;
	this.speak = speak;
  }
  let fido = new Dog('fido',() =>console.log('bark'));


//ES6 'classes' are really just an organized constructor function.
    class Chicken{
	speak(){
		console.log('bawk');
	}

	constructor(feathers,eggs){
		this.feathers = feathers;
		this.eggs = eggs
	}
    }
    const cluck = new Chicken(1000,2);
    cluck.speak();

// NOTE the constructor() method is a special keyword to actually
// create a constructor for that object!!

==> Review:
- Java: classical inheritence (class based)
- JavaScript: prototypal inheritence (prototype based)
	-- objects extend other objects, NOT classes.
-- "class" in javascript is actually just a constructor function.
 Know what a constructor function is.


==>NOTE:
ES6 stands for ECMA-SCRIPT6 and has a preffered way to do things:
http://es6-features.org/#DefaultParameterValues
HOWEVER: Internet explorer doesn't support ES6 JS.

~~~~~~~~~~~~~~~~~~~~ Polymorphism In JS ~~~~~~~~~~~~~~~~~~~~~~~~~~~
Many forms... 
In java: Overloading and Overriding.
In JavaScript: 	
	- We can't use parent class references and get child 
implementations (no super()), but it is possible to override methods,
 and it is possible to "overload" methods via clever programming.

	Overridding - You certainly can because the program looks 
through from you object up the protos. You can reassign what a 
keyword does, from function to field. 
Overriding works like normal. Child object can define their own
implementations for functions with the same naame as the parent. 
Calling these functions will use the child function, because its 
 nearer in the protochain.

	Overloading - Can be done with defaults. 
1. Default parameter values
2. Extended parameters (var args)

	Functions in javascript don't care what you pass to them. We cannot assign two different functionsto the same object with the same name. Overloading like java in'st possible, but you can include internal logic to adapt to different parameters.

sum(2)(3) -> 5
sum(2,3) -> 5

   let sum = function(x,y) {
	if(y===undefined){
		return (z) => x + z;
	} else {
		return x + y;
	}
   }

//OR, with a ternary operation:
  let sum = (x,y) => y===0^y ? x+y : (z) => x+z;

-- We can't have funtion overloading in the same sense as Java,
however we can adapt functions to handle varying amounts of arguments
internally.
ARROW functionsare a great way to return functions. 

~~~~~~~~~~~~~~~~~~~~ Abstraction In JS ~~~~~~~~~~~~~~~~~~~~~~~~~~~

--There isn't any

~~~~~~~~~~~~~~~~~~~~ Encapsulation In JS ~~~~~~~~~~~~~~~~~~~~~~~~~~~

-- Encapsulation : "A black box"
	For of/ way to hide data.
--In Java, encapsulation is created with access modifiers. 
  Getters and setters allow access to restricted methods/fields.

- NO access modifiers in JavaScript;this makes encasulation tricky.

   Generally, over the years, encapsulation is implemeted using 
closures. Closures are a language feature, which is defined as fields
defined within a function accessible from an inner function being
available after the outer function has returend.

//Example:
let outer = function(){
	let x = 10;
	let inner = function() {
		console.log(x)
	}
	return inner();
}
let myX = outer(); 	//now myX is a function printing 10.
let myX();		//Prints 10!

//Javascript "getters" and "setters" in a closure
let outer = function(){
	let x = 10;
	return {
		get: () => x,
		set: (y) => x = y
	};
};

let x = outer();
x.set(10);
x.get(); // returns 10.

// This IS a JavaScript FEATURE (see below)
// It holds onto the value placed into it. 
You are able to encapulate them or access them outside of the function in which they're defined. 

Language feature defined as function which defines fields and 
returns an object with functions which accesses those fields and 
the fields stay alive becase they are accessible from a declared 
function. You can "hold on" to some values in memory.
// JavaScript developers don't need encapsulation, really.

class MyObject {
 //Note: "Private" fields are started with underscores.
 //IE: _myPrivateField;

	get myPrivateField(){
		return this._myPrivateField;
	}
	set myPrivateField(f){
		this._myPrivateField = 5; 
		//Functionally built into the langugage.
	}
	constructor(field){
		this._myPrivateField = field;
	}
}

///////////Putting it all together:
class MyObject {
	get x() {return 10;} // x is private and cannot be set
	get y() {return this._y;}
	set y(z) {this._y = z}
	constructor(y){
		this._y=y;
	}
}

"this", "get", and "set" keywords are build into the language. 
Functions defined with the get keywords can be treated like
fields:

y = new MyObject(5);
y.myPrivateField

==> Closures (2)
https://www.w3schools.com/js/js_function_closures.asp
 - Closures are created by defining a variable with a self-invoking 
  function that returns another function.
  function
	let add = (() => {
	    let counter = 0;
	    return ()=> {counter += 1; return counter}
	})();
	   ^--The parenthesis here makes the function invoke itself
When add is defined above, the following steps occur:
    1. The outer function is run first
    2. The counter is set to 0 and saved in memory.
    3. The inner counting function is returned as variable add
If you write "add;" into the console, it returns:
	()=> {counter += 1; return counter}:
The counter variable from the parent scope is still accessible to
 the add variable, but it is protected in the scope of an anonymous
 function (a function with no name) so it will only ever be
 accessible by invoking the add function

The above function can also be broken apart like this:

	function initializeAdd() = {
	    let counter = 0;
	    return ()=> {counter += 1; return counter};
	}

	let add = initializeAdd();
	
===================================================================
	       		* Functions
===================================================================
	Functinons in JavaScript are "first-class citizens"
Meaning: 
- Functions in JS are treated like fields
- Functionscan be:
	- assigned
	- reassigned (as functions or variables!)
	- returned
	- passed 

Recall Declaring functions:
	function myFunc() { ... }
	myFunc = function() { ... }
	let myFunc = () => {...}

==>Callback functions:
- Callback functions are a function called by another function

	const myFunction = function() {
		console.log('Done!');
	}
	setTimeout(myFunction, 1000)

Q: Did we call the console.log function?
A: NO. We DEFINED myfunction and CALLED setTimeout

Example of how a callback function might be utilized:
	Const otherFunction = function(f) {
		f();
	}

otherFunction(myFunction);

==> Default parameters
Functions can be given default parameters if the user doens't 
supply all the arguments.
	function someFunction(x,y=0) {
		x+y
	}
When calling this function, if only 1 argument is included, 
the second argument will be set at 0 as a default. 
You can, of course, do this with any number of parameters.
	function log(x="You didn't supply anything to log") {
		console.log(x);
	}

===================================================================
	       		* Enhanced For Loop
===================================================================
=> Iterate through an array:
 	for(let e of myArr) {
	//code
	}

=> Iterate through an object
	for(let key in myArr) {
	// code
	}
 - When iterating through an object, the key becomes a string for
 each key within the object. 
	SEE: https://www.w3schools.com/jsref/jsref_forin.asp

===================================================================
	       		* Events
===================================================================
- An event in JavaScript is a reaction when triggered by the HTML
- HTML events:
	- Page loads, click, mouseover, input field changed, ect
- JavaScript allows you to execute code on events for elements.

Ways to bind a function to events:
1. In the HTML - use  a property (ie: <button onclick="jsFunc()">
	onclick
	onload
	onmouseover
	onchange
	onkeydown
2. In JS, addEventListener to that element 
	document.getElementById("some-id")
		.addEventListener('click',jsFunc);

==> addEventListener(event,function,useCapture);
- event is the event in HTML (without the on- prefix)
- function is the js function
- useCapture is an optional parameter, by default set to false.
- Note the function doesn't have parenthesis in this one because
  it is a callback function.

==> Bubbling/Capturing
- Reffers to the order in which JS handles events.
Example:
  <div onclick="someFunction()">
	<button onclick="otherFunction()">
	</button>
  </div>
- Q: When the button is clicked within this div, which even happens first?
-A: The div's someFunction() happens first; capture is default

- Capturing is when the JS orders the events from the top node(html)
  down to the element
- Bubbling runs the event from the innermost element to the top node
- You can stop bubbline/capturing all together with stopPropogation
	document.getElementById("some-id")
		.addEventListener('click',jsFunc)
			.stopPropogation();
===================================================================
	       	* Working with the DOM
===================================================================
  document.getElementsByTagName()
  document.getElementsByClassName()
  document.getElementById()

-> child elements:
  let elem = document.getElementById('some-id');
  elem.children[n] //Gets the nth child (HTML Element only!)
  elem.fistElementChild; //Same as children[0];

  elem.childNodes[n] // gets the entire node and it's contents
  elem.firstChild[0] // same as childNotes[0]

-> Parent element:
  elem.parentNode
-> Sibling Element:
  elem.parentNode.childNode[n];
  elem.nextSibling

- Modify an element's class
 classList.add('class')
 classList.remove('class')
 classList.toggle('class')

- innerText VS innerHTML
 --innerText encodes the string so that characters such as "<" and
 ">" actually show up on the page rather than become tags.
 --innerHTML does not encode the string, allowing HTML to be inserted
  directly from JavaScript
  

-> Get by CSS Selector syntax:
Allows you to get elements the same way they're selected in CSS
  document.querySelectorAll() //Gets all matching items
  document.querySelector("div p") //Gets first element matching

===================================================================
	       		* Fetch
===================================================================

==>API and fetch: 

const getData = async function() {
    /**
     * Using Fetch
     */
    const url = 'https://www.anapioficeandfire.com/api/books/1';
    const response = await fetch(url);
    let data = await response.json();
    console.log(data);
    document.getElementById('title').innerText = data.name;

    for(let url of data.povCharacters){
        const charResponse = await fetch(url);
        const charData = await charResponse.json();
        const li = document.createElement('li');
        li.innerText = charData.name;
        document.getElementById('character-list').appendChild(li);
    }
}

===================================================================
	     	  	* AJAX
===================================================================
XHR (XmlHttpRequest)- AJAX (Asynchronous JavaScript and XML)

- Predates the fetch API and was the way we made HTTP requests 
  prior to fetch, and still is in wide use today.

REST - Representational State Transfer, or RESTful web service is
an architecture style for developing web services.
Commonly used with HTTP to transfer web resources in the form of 
test representations. 
HTTP methods in a proper REST should follow CRUD acronym
 (Create, Read, Update, Delete) 
HTTP methods: POST, GET, PUT, DELETE

- JSON - JavaScript Object Notation -  lightweight data interchange 
format. It is easily human-readable/writable, easy to parse.
JavaScript generally uses JSON-format obects in AJAX requests

==> xhr XMLHTTPRequest
- xhr does not necessarily use XML.
- Stages of XMLHttpRequest:
	0. Uponened 		(new, no method or URL)
	1. Opened 		(method and URL input)
	2. HEADER_RECIEVED 	(request sent)
	3. LOADING 		(loading reply)
	4. DONE 		(done)
- Basic steps:
 1. Create request 
		const xhr = new XMLHTttpRequest

 2. Open the request:
	xhr.open('get','http://api.url.here/');

 3.(optional) Add event listener for changes in state 
	xhr.addEventListener('readystatechange',stateFunc);

 4. Add event listener for when response finishes loading
	xhr.addEventListener('loadend',endFunc);
 5. In the end function, parse the data:
	function endFunc() = {
		console.log(JSON.parse(xhr.response))
	};
 6. Send the request
	xhr.send();

Example:
____________________________________
const xhrExample = function() {
    const url= 'https://www.anapioficeandfire.com/api/characters/148';
    const xhr = new XMLHttpRequest();

    console.log(xhr.readyState); //0. unopened

    //must use event listeners to interact with xhr
    //This does not SEND the request
    xhr.open('get', url);
    console.log(xhr.readyState); //1. Opened
    //Defines evens prior to sending request so the
    // listeners are ready before the even happens
    //2. Headers_recieved
    //3. Loading
    //4. Done
    xhr.addEventListener('readystatechange',() => {
        console.log(xhr.readyState);
        if (xhr.readyState == 4) {
            //do stuff. 4 means DONE.
            // can be used if you need to check the transition from loading ot not loading ect like you need to check for na error. 
        }
    })

    xhr.addEventListener('loadend', () => {
        //JSON.parse converts STRING to JSON object
        //JSON.strinfify does the opposite
        console.log(JSON.parse(xhr.response));
    });
    //Send request
    xhr.send();
}

xhrExample();

~~~~~~~ Other Types of files beside JSON
==> XML
XML files are an entire HTML page rather than a JSON object.
- XML still works on a dom. Use a dom parser.

- XML DOM requires us to remember the entire DOM tree 
	- nice but has a lot of overhead.
- DOM maintains entire DOM obj ect in memory at once. 
	- May not be possible for sufficiently large XML documents.

==> SAX is event-based. SAX parses the XML and raises events upon encountering elments. SAX is faster than DOM, but utilization is somewhat more complicated, and the DOM itself isnt persisted in memory.
The structure is'nt kept. You just are able to react to events.
Benefit - you dont have to keep the whole thing in memoy. 
It can work on very large XMLs 
--Implementation is "more complicated" than XML, but not too bad.

==>JAXB - java architecture for xml binding.
- meant to be higher level. 
-we marshal the xml (take it and convert ot java object.) 
Then we can work with in a more normal fashion. 
Essentially represent java object state in xml in the same way
 serialization worked.
- data format like JSON for recieving and parsing data from an API. 
Converts object state to data in this way.

====================================================================
		   * Java & Front End
====================================================================
== > See Week 4 for more polished/complete notes.
=================================================================
		   * Singleton
=================================================================
SIngleton design pattern - tool we use when we have some object and class where we only need one instance of it. Never will need more.
Singleton -> class where only 1 object will ever be necessary.
IS utilitarian things or singular things.. 
	IE scanner or database connection.

Good if you need something more object-based.
 Good for database managing objects/external resources
 - Especially multi-threading

class Singleton {
	private static Singleton = new Singleton();
	private Singleton(){
		//Instantiaets object
 	}
	public getSingleton(){
		return singleton;
	}
}
 
================================================================
			Servelets
================================================================
Eclipse >> Window >> Show Perspective >> other >> Java EE

- Show your problems tab (window > show view > other > problems)

Server tab >> new server

Server type = tomcat9

...

When done, right click server > Start.

Note tomcat just has console text in red.

In browser : localhost:8080
Now you can see local server is up and running.


==> Creating the porject
New Maven Project
--> NOT a simple project

On next page: chose webapp option 

Group :com.revature
ID: project name

Starts with problem, need to configure this. 
Right click project, Properties
Project Facets dropdown

Check dynamic web modules,

Runtimes tab, Check apche tomcat


Need a file that tells the server where to look in the project for the servlets (classes)

==> New folder structure
To create a new file, you need to go to the nromal main folder and create a java folder ( a folder named java )

Create class in java
package com.revature.servlets


==> Servlet Hierarchy:
Starts with interface:	Servlet		//interface, no methods
Implemented by:		GenericServlet	//handles responses/request
Extended by:		HttpServlet	//imp. by oracle (javacorelib)
Extended by:		DefaultServlet	//apache tomcat specific
Extended by:		You

Class MyClass extends DefaultServlet

Override method:
 service(httpServletRequest request, HttpServletResponse response) throws ServletException, IOException

KNOW that service throws ServiceException and IOException



webapp > web-inf > web.xml
Press source ( ignore design stuff )
==> If you make ANY mistake in the XML, it wont run the server at all
==> within the <web-app> tag:
  <servlet>
 	<servlet-name>hello</servlet-name>
  	<servlet-class>
		com.revature.servlets.HelloWorldServlet
	</servlet-class>
  </servlet>


  <servlet-mapping>
  	<servlet-name>hello</servlet-name>
  	<url-pattern>/hello</url-pattern>
  </servlet-mapping>
  

Right click server tab. Add and Remove.
Put the servlet you want in the configured side.
This is us giving the project to Tomcat.

Double click server to get overview.
Go to modules tab to see mapping for project.

Start server (see if it starts)

localhost:8080/ServletExample/hello

--> If you get an error, look in your console in eclipse!

In the XML file, you can change the URL pattern to:

  	<url-pattern>/hello/*</url-pattern>
and it'll let you type stuff at the end of the URL


==> Service (in an HttpServlet) is a method used to delegate requests to an appropriate handler method based on the HTTP method utilized to make the request.

HTTP Method    Handler Method   Crud Operation   SQL
GET 	->	 doGet		read		SELECT
POST	->	 doPost		create		CREATE
PUT 	->	 doPut		update		UPDATE
DELETE	-> 	 doDelete	delete		DELETE

doGet override can be used if service isn't there.
If you override BOTH, your doGet won't automatically come up. 

Can use 
super.service(request,response);

---------------
Some stuff here
-----------
The lifecycle of a servlet has 2 steps:
1. init - Initializing the servlet - Called once
2. service - handling a request - once per request
3. destroy - end of servlet lifecycle(shut down) - called once/never