
Spring Table of Contents: 
* Spring Framework
* Getting Started (XML)
	* Autowiring
* Getting Started with Java
	* Injection Types
	* Bean Scopes
* Bean Lifecycle
* BeanFactory vs ApplicationContext
* Spring AOP
* Aspects
	* Types of Advice
* AOP Quick List
* Spring MVC
	* Getting Started with Annotations & MVC
* Mapping HTTP Requests
* Transactional Management
* Spring Boot
 =================================================================
		 * Spring Framework
 =================================================================
the Spring Framework:
	- Open-source framework created to simplify complex
	enterprise application developmetn. 
	- Advantage : layerred architecture, which allows you to
	pick and choose the components to use.
	- Main components:
		= Spring Core
		= Spring AOP
		= Spring MVC

==> Spring core:
	- is a Dependency Injection (DI) Framework.
	- Uses "Spring Beans" as basic building blocks

Why use spring?
-In the model we used previously:
	Controller --> Service --> Dao
- The classes tended to be tightly bound, as the service had a 
singleton DAO, and the Controller a singleton Service.
- This was difficult to test, and became complicated quickly.
Changes in the controller tended to cascade.

- Spring dependency injection framework dents to decouple these

Features : 
- Inversion of Control (IOC) - Concept of dependency injection
	- Programmer DESCRIBES how objects are created
- Aspect Oriented Programming (AOP) 
	-- isolates secondary functions from main
- Container -> Lifecycle/ config of objects
- MVC Framework for web paplications
- JDBC Hibernate Handling
==> 3 ways to configure 
1. XML
2. Configuration class
3. Annotation driven config.

DI Container 
- like how sessionfactory reps state of application
- Class holds all beans and manages construction/config of beans
- creats all connections
- managers session state.
-- Types (interfaces)
	- BeanFactory - Lower level
	- ApplicationContext - extends BeanFactory 

Advantages: 
- Can have different bean configurations without changing code.  - Can have different xml files for different definitions of objs.
===============================================================
		* Getting Started (XML)
===============================================================
- Create your classes
* Configuration file
- beans.xml
- beans is the root tag.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"
    default-init-method="defaultInit"
    default-destroy-method="defaultDestroy">

    <bean id="Earnest" class="com.revature.beans.heroes.Warrior">
    	<property name="name" value="Earnest"></property>
    	<property name="strength" value="145"></property>
    	<property name="potion" ref="health-potion"></property>
    </bean>
    
    <bean id="health-potion" class="com.revature.beans.potions.HealingPotion">
    	<property name="name" value="Healing Potion"></property>
    	<property name="power" value="90"></property>
    </bean>
    

</beans>


NoUniqueBeanDefinitionException - Exception when multiple beans
could qualify as the one you'd like.
	- can set one bean to be the primary in the case there are 
	  multiple qualifiers.

~~~~~~~~~~~~~~~~~~~ * AutoWiring ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
autoWire - will automatically "wire" the bean to the type if it needs
	one. The one it "wires" to must be labelled as the primary.
	- When a type isn't specified, it will automatically look for
	object of that class and if one is labelled primary, it will
	auto=wire it to that object.
Autowire Types: 
Default autowire="no"
	- DI must be set manually with "ref" attribute
autowire="byName" 
	- Matches by XML config "name"
autowire="byType"
	- Match by property datatype
	- Throws exception if more than one exists
	- @Qualifier annotation can be used to declare exactly which
	 bean to autowire if XML is not used to define beans
autowire="constructor"
	-doesn't use getters/setters, just constructor
autowire="autodetect"
	- Tries constructor, then tries byType

====================================================================
		* Getting Started with Java
====================================================================
====> Starting with Java
@Configuration class
	- Designates class(es) that configure what beans to load:
	- @Bean annotation over methods which return the the bean
@Component 
	- stereotype annotation that defines a class as a 
	 bean that spring can manage

First, create the core config bean.
- uses annotations
- don't name the configuration class Configuration. 
- annotation doens't allow it to be called "Configuration"
- ConfigBean class starts with @Configuration annotation above the 
	class decalration.
- @ Bean annotation above method:
	@Bean
	public MyObject myObject(){
		return new MyObject("my object constructors");
	}
 the equiv. of creating an XML config:
	with name attribute being plate, class being (yoru import)
	and values specified in the returned constructor

- Can add autowire in the call, and you can still use the method the 
  same way. (comfigBean.waffles();)
	@Bean
	public  Waffles waffles(@Autowired Plate plate) {
		return new Waffles("waffles", plate);
	}
	
- @Bean annotation has options:
@Bean(autowire:)

In a lancher class, run:
ApplicationContext context = new AnnotationConfigApplicationContext("com.revature.beans");
-- config will scan the package looking for @Component annotation

~~~~~~~~~~~~~~~~~~~~ * Injection Types ~~~~~~~~~~~~~~~~~~~~~~~~~~~
1--> Field injecting
-- @Autowire above field
	-- doign do directly assigned the value using reflection
	- thei si not the preffered way ot autowire 
	- it does not go thru the constructo fo the setter!
	- it directly can access private fields

2--> Setter Injection
-- Can also attach autowired to a setter method
	- Now it'll get the autowired at the setter method

3--> Constructor Injection
@Autowired
public Jedi(@Value("Caleb") String name, SithLord enemy) {

4--> Interface Injection
	POSSIBLE, not not with Spring

With annotation - we really can only get one bean per class.

==> Dealing with conflicting multiple beans:
1. Primary Bean
2. Add qualifier to provide rule to determine 
   bean you're looking for
	Under @AutoWire add:
	      @Qualfier()

-> Simpler to have separate beans for different configurations 
   than deal with those

-> Beans system typically used for workflow, 
   not so much for data holders
	- Not for entities as much - more control/service/ect

- @Required annotation can be used to indicate the bean must be 
 populated at configuration time (it must get autowired a bean or 
 be given indicated properties.
 	- Used to simplify debugging
~~~~~~~~~~~~~~~~~~~~~~ * Bean Scopes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@Bean(scope = "___")
Scope is optional to provide.
==> 5 scopes: 
- singleton - Single bean definition per injection container
- prototype - New bean for each request
- request - Single bean per HTTP request
- session - Single bean per HTTP session
- globalSession - Single bean per global HTTP session

The Default scope for beans is Singleton.
 ==================================================================
			* Bean Lifecycle
 ==================================================================
Lifecycle of beans 
==> Maybe memorize this one.

public class MyBean implements BeanNameAware, BeanFactoryAware, ApplicationContextAware, 
InitializingBean, DisposableBean, BeanPostProcessor {
	// Then generate all methods!
}

The order: 
setBeanName
setBeanFactory
setApplicationContext
afterPropertiesSet


By default, beans initilize eagerly.
Lazy initialization will only initialize the bean as they are requested. 

To automatically inject dependencies, use AutoWired 
Autowired is a SPRING annotation
the Java annotation is Inject
	However, Spring doesn't support that by default.
	--> Add depndancy: Javax.inject
== > QC Question: Injection vs Autowired are the ythe same?
	- Basically yes.
	- The benefit of Inject is that it is more flexible with 
	other frameworks. 
	- In terms of behavior, internally they are slightly 
	different, but look just about the same

Calling destroy won't actually trigger the lifecycle stage.
- Singleton bean is typically supposed to survive the lifecycle of 
the application.


How to destroy Bean  :
You have to very specifically destroy it:

((DefaultListableBeanFactory)((annotationConfigApplicationContext)context).getBeanFactory()).destroySingleton("my-bean");

===================================================================
		 * Bean Factory vs Application Factory
===================================================================
- ApplicationContext extends BeanFactory

==> Bean factory 
	-used for bean instantiation/wiring only
==> Application Context
	- More flexible
	- Instatiates/wiring of beans
	- Auto MeanPostProcessor registration
	- auto BeanFactoryPostPorcessor registration
	- MessagingSource (for internalization/localization)
	- ApplicationEvent publication 
		(Beans can get updates on other bean's events)

Application Context is a central interface for config info for app.
	- Allows application to not use singletons
	- Can load file resources generically
	- Register/publish events (for communication between beans)
	- Allows inheritence from parent context:
		-> Context polymorphism among servlets

===================================================================
			* Spring AOP
===================================================================
- AOP : Aspect Oriented Programming
	- Analogous to Object-oriented programming
	- Allows modularization of concerns (responsibilities)
	- Cuts accross multiple classes.

- Every time the code tries to use the method,
  we can add code before it, after it, or around it.

==> AOP usually targets cross-cutting concerns
Concern : a particular responsibility. 
	- Classes should typically have a single responsiblilty.
	- Methods also should have one responsibilty.

Cross-cutting concerns are not isolated to one location.
	- Hard to isolate these.
Example use:
	=> Creating and closing session using AROUND. (Transactions)
	=> Spring already does this kind of thing!

- Using reflection, it checks every method for certain Predicates
  (conditions) and injects code where neded.

Vocabulary: 
Aspect : A modularization of a cross cutting concern 
	- Class that implements concerns that cut accross different
	 classes (ex: LoggingAspect)
Join point - Location in code where an aspect can weave code
	- In Java - this is always a method
	- JP = "point in execution of program"
Point cut - expression that decides execution of advice at the JP
	- Spring uses AspectJ pointcut expression language
Target - the method a point cut matches.
Advice - A logical implementation of the aspect
	

==> Getting Started :
	- Be sure you have the @EnableAspectJAutoProxy on one of your
	@Configuration classes!


==> * Types of advice
 *  @Before  - Code is woven prior to joint-point method execution
 *  @After - Code is woven floowing joint-point method execution
 *  @AfterReturning - code is woven following the return of a joint-point method execution
 *  @AfterThrowing - Code is woven following join point throwing unhandled exception
 *  @Around - Code is woven before and after join point execution

- All types other than around can accept a JoinPoint reference, which is an object referring to the JoinPoint (Method we are targeting)
Around gets PreceedingJoinPoint object which is similar to a JoinPoint object, but allows the targeted method to be called.

 ===================================================================
 			* AOP Quick List
 ===================================================================
AOP
Weaving code
Cross-cutting concerns (examples)
	- Session management - Spring ORM
	- Authorization - Spring Security
	- logging 


Aspect Oriented Programming Terms:
Aspect - modularization of cross-cuttong concern
	- Single aspect focuses on one concern.
	- Modularize to single class to isolate code to 
	single place.
	-- One aspect does ONE thing
	- IE for hibernate sessions or jsession stuff
advice - 
join point - 
	- Place where it could be a target 
	- Method execution is always a join point.
	- Can only inject in method execution here 
point cut - Predicate expression used to detering join joins
	to be targeted for a particular advice
	- Says what advice goes to what join point
target - some method where the join point matches
	- where advice will be injected

Types of advice : 
	- Before
	- After
	- Around
		- Preceeding join point is the object
		- PJP.proceed() actually calls it
		- inject instnace of join point ot metho then
		call .proceed 
	- After returning
	- After throwing
 

===================================================================
			* Spring MVC
===================================================================
- The Spring MVC uses Annotation-driven Spring
	- Slightly different from the java-based annotations above
	- Includes more stereotypes annotations.

==> MVC: Model - View - Controller
	- Model = object that contains data
	- Controller = logic
	- View = JSP (we don't use this, but it is important to know)

==> * Getting Started with Annotations & MVC
	Must include in XML configuration:
	<annotation-driven />
	<context:component-scan	base-package="com.revature" />

- These tages are really the only ones that need to be in your XML
  configuration within the beans tag
- By default, spring is not set to annotation driven.

--> NEXT, the web.XML file must be configured to send all requests
   through the spring DispatcherServlet 
	- The abstracts the front-controller pattern

 <servlet>
   <servlet-name>spring</servlet-name>
    <servlet-class>
	org.springframework.web.servlet.DispatcherServlet
    </servlet-class>
    <init-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>/WEB-INF/spring-servlet.xml</param-value>
     </init-param>
     <load-on-startup>1</load-on-startup>
 </servlet>
 <servlet-mapping>
    <servlet-name>spring</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

Note : This load-on-startup tells it to run init() when the server
	starts rather than waiting for the first HTTP request.
     -  The url-pattern and DispatcherServler follow and abstract
	out the front-controller pattern

==> Component Stereotypes : 
@Component - Generic annotation for bean
@Controller - Annotation for dispatcher to scan for mapping HTTP req.
@Service - Annotates service layer (best practice to use)
@Repository - Annotation for repository layer (DAO)
	- Catches platfor-specific exceptions (IE: SQLException)
	 and throws them to Spring's handler.

Our layers - 
- Controller(@Controller) OR (@RestController)
	-> RestController is for REST api,
	- Means there won't be any view
	- for data that will be Marshalled (sent to JSON)
	@RestController implies another annotation : @ResponseBody
	-@ResponseBody is requiredfor lettign it know this is the 
	stuff that needs to be marshalled and sent out
- Service(@Service) 
- DAO(@Repository)

===================================================================
		* Mapping HTTP Requests
===================================================================
The class for your controller shall be as follows :
1.) Package and imports
2.) @RestController Annotation 
	- If the @Controller annotation is used, you must include the
	@ResponseBody annotation to each method which return a
	response to the requester.
3.) @RequestMapping Annotation
- When an HTTP request is sent to the application, controllers with
  the appropriate annotation will be scanned for Request mapping:
	@RequestMapping("hello")
- Request to http://host:port/hello will go to this controller
4.) @CrossOrigin() Annotation
- Request sent from a brower may be rejected if Cross-Origin headers
  are not explicitly allowed. This can be done with the @CrossOrigin
  annotation. Example:
	@CrossOrigin(origins="*", allowCredentials = "true") 
- You may need to specify exactly which origins are allowed:
	@CrossOrigin(origins="http://localhost:4200")
5.) public class SomeNameController {
6.) Add service layer dependency and constructor
	- use the @Autowired annotation
7.) HTTP request method mapping
- Annotation determines which method to use depending on the location
 and type of HTTP request.
 Example:
	@PostMapping("list")
	public void myMethod(@RequestBody object MyObject) {
	// handling request
	}
- Request to http://host:port/hello/method will go to this method
- POST method will go here. The Request body will attempt to be 
  parsed into the specified MyOject using Jackson. 
- Path variables can also be specified:
	@GetMapping("world/{username}")
	public MyObject sayHello(@PathVariable String username) {
		return new MyObject(10, "Hello " + username);
	}

- By default, the HttpServletRequest and HttpServlerResponse objects
  can also be passed to the method:
	@PutMethod("authentication-required")
	public String authMethod
		(HttpServletRequest req, HttpServletResponse resp) {
		// ...
	}
- Query parameters can also be specified
	- In doing so, it may be useful to use the Optional object
	  in order to handle the request if no parameters or not all
	  parameters are sent in.
					|-------|<-Query Params
 	  www.mysite.com/.../hello/world?x=5&y=Hi

  @PostMapping("new")
  public ResponseEntity<MyObject> createObject
  (@RequestParam Integer x, @RequestParam(required=false) String y) {
	Optional<MyObject> optionalObject;
	if(y == null) {
	    optionalObject = Optional.empty();
	} else {
	    optionalObject = Optional.of(new MyObject(x, y));
	}
	ResponseEntity<MyObject> entity = ResponseEntity
		.status(HttpStatus.CREATED) //201 
		.body(optionalObject.orElseThrow(() -> 
			new NullPointerException())); 
		return entity;
   }
- An @ExceptionHandler can be added to deal with exceptions
 (This can be done to any  spring component)
	- Typically, use this for custom exceptions or expected ones
	  pertaining to your Controller
- The @ResponseStatus can be used to set a status as well when this
  method is called

	@ExceptionHandler(NullPointerException.class)
	@ResponseStatus(code=HttpStatus.BAD_REQUEST)
	public void nullHandler() {
	  System.out.println("Handling null pointer exception!");
	}

===================================================================
		   * Transaction Management
===================================================================
==> First bootstrap Hibernate by providing a Configuration bean
	-Bootstrap : Install application to another

-- Hibernate configuration class contains:
	- get Session factory
	- get Data source <-- Has connection information
	- get Hibernate transaction manager 
	  	(Spring tool for managing transactions)

Pom dependencies needed:
==> Needs hibernate dependencies in POM
==> Spring ORM 
==> Postgresdriver

Once properly configured, you can autowire the SessionFactory to 
the repositories and use the @Transactional annotation.

Example: Service may have method my have :
 	@Transactional
	public void save(...) {
		someRepo.insert(...);
	}
	
and it'll run like a transaction.
And the repository:

	@Autowired(Sessionfactory sf)
	// Constructor

	@Transactional
	insert(object S) {
		sf.getCurrentSession.persist(S);
	}

- Session context will be provided by Transactional annotation
- Generic abstraction layer for transaction management
- Can also be used in evnrionment without contianers.


==> Transactional Annotation

Transaction Propogation levels:
MANDATORY 
	- must have a current transaction, 
	- throws exception if none exists. 
	- MUST be a part of a transaction
NESTED  - If transaction exists, pause it and create a new one. 
	- Else, create a transaction.  
	- (Use ex: for logs)
NEVER 	- Only works when there is not tnaasactional context, 
	- throws exception if one exists.
NOT_SUPPORTED - Pauses existing transactions 
	- and operates non-transactionally. 
	- Existing trasaction if any will continue afterwards. 
REQUIRED - Creates a transactional context if none exists.
	-  Else, uses existing.
REQUIRES_NEW - Always creates a new transactional context,
	- Pause existing ones if they exist. 
SUPPORTS - Uses a transaction if context exists
	- otherwise operates non-transactionally.

-- can load in the proxy even after the original method completes
   this way. 

-- Transactions have a lot of possible configurations. 
	@Transaction(propogation = .. , plus others!)
	- Includes isonlation level and other definitions		
-- Must manage the sessions more abstractly.


 ===================================================================
			* Spring Boot
 ===================================================================
Opinionated Attitude Towards Configuration
	-> for us:  Minimal configuration
Procude .jar files as opposed to .war.
	- Embedded server 
- Has a main method
- Simple implementation of Spring module
- Restful access to runtime info via actuators.
	- Can have server to check different information from.about the info such as errors, running, status, ect
--> Springboot IS an embedded server! It has it's own tomcat!


=============
** Note: Look in to Spring Security
============

 Upon creating project, make sure it is a .jar file 
	- can be set in the POM how it is built if you forgot

Start:  Get propper dependencies/plugins

In application(launcher) class: 2 STEPS:
1. Add annotation
		@SpringBootApplication
2. In main method use:
	SpringApplication.run(Application.class, args);


@SpringBootApplication
public class Application {
	public static void main(String[] args) {		
										// args to the main method
	SpringApplication.run(Application.class, args);
	// SAYS to a scan from THIS package DOWN
	/// This is why app is typically in the package ABOvE all the rest.
	// Args passed in incase they're important command line args.
	// AND THAT's IT!
	}
}


==> Now cerate a yml file to src/main/resources
application.yml
This can set the port number
- Whitespace in yml file matters!
YML : Yet-another Markup Language
=> Whitespace : an indent is 2 spaces.
	- File shall not start with a space.
CONTENT:
__________
server: 
  port: 8888
__________
==> If above doesn't work, you can use application.properties file
	- Also would go in src/main/resources
____________
server.port=8888


==== Seeing codes:
 USE THE /actuator TO SEE SPRING BOOT THINGS
GET to localhost:8888/acutator/health

--> Can config more exposed things.
management:
  endpoints:
    web:
      exposure:
        include: [beans, health, conditions, env, configprops, loggers]
--> Can actually shut down application through HTTP POST.
However, the endpoint must be explicitly enabled:


  endpoint:
    shutdown:
      enabled: true

Can add more things to include for this.


--> WE generally WON'T do this manually, but it is important to know
These endpoints are for applications to communicate with eachother!

Note : Fully generic version of JpaRepository<Cat, Integer>

====================================================================
			* Spring boot + Jpa
====================================================================
Levels of repos:
- Repository
- CrudRepository - Basic CRUD behavior, similar to hibernate's
- PagingAndSortingRepository - behavior related pagination and sorting of date
- JpaRepository - Deeper JPA implementation, fluent language

JpaRepository methods : Has quite a few by default

Pageable: 
Object that reps. the state of a page used in pagination
Spring mvc have the funcionality to get pages automatically.
Can createa page request which can then be passed on to the repo

**************************
JpaRepository : "fluent language"
	- Parses the method NAMES and creates query from that
SEE:
docs.spring.io/spring-data/jpa/docs/current-SNAPSHO/reference.html

* JAXB Note:
Jaxb errors will have something to do with XML!
Look thru XML things if that's a problem you're getting!

====================================================================
	REVIEW
====================================================================
What is Spring?
Inversion of Control Framework for Java which manages dependency injection.
Spring boot gives the entire application to Spring to manage.
==> What is dpenedency injection - 
	With object oriented programming, we have relations with other objects. These are described as dependencies. These dependencies cause different components of the application to be coupled together - you have to create a string of objects in order to instantiate the object. Dependency injection decouples the implementations - you just say what service you need rather than exactly how it needs to be created. 
IE: We create an interface for the repository and call it. IWe don't knwo how the repo is instnatiated or implemented. Doesn't matter. We just need the methods. Without DI, you need to instantiate all the classes that the dependency needs... You can't instnatiate an interface... So this simplifies the process. You can more simply track down where the dependencies come from.
Structured way to manage what classes/services need to be used by the application in its current configuration state. Can create dependencies on an abstract level.

==> Managing, troubleshooting, testing is difficult when things are tightly coupled.

==> Spring Beans are the objects that we are telling Spring to manage.
 To get beans - we can Autowire them or ask to get them from the Bean Factor. It creates the bean we want with the arguments

==> BOOT:
Does the same thing as Spring Core, but they reqrote the configuration. The concept of DI is the same. Still using ApplicationContext. Same tool but written in a more modern fashion. 
The applicatoin is fundamentally different because it handles much of the configuration by making assumtions
Spring BOOT IS NOT A MODULE. It is a "reimagineing" of what Spring is and how it can be done.

==> AOP - Aspect- oriented programming
- Addresses cross-cutting concerns by weaving code across an application around predicates that match certain expressions.
- AOP is used in all of the spring framework modules.
- Principally: Spring AOP is a module of Spring that brings aspect oriented programming to Java - in a limited fashion - to meet the needs of Spring. Not a fully-functioned AOP, but goot enough for about 90% of user's needs.
- More fully-featured Aspect- oriented feature is AspectJ
==> Final answer to teh question (start with concepts!)
- Spring AOP is a module of spring that is foundational to other module that breings aspect oriented features to sprign.
AOP includes the calability to weave code across app to address cross cutting conerns
Spring uses it to address plubbing issues - doing common tasks.
IE Sessions, logging, directing requests from front controller to logical ones.
- Nessecary to avoid boiler-plate code.

==> Join point vs poitn cut
Join point - any location in code that could be a target for advice (in spring, any public method execution.. In aspectJ, not limited to this)
Point cut - predicate expression - applied to match a join point to the actual advice.
EX:
@PointCut("package("com.revature.* * *")

==> MVC
	- DONT ANSWER WITH ANNOTATIONS
	- They want to know about HOW it works
	- Know that chart. Talk ARCHITECTURE
- Brings built-in architecture because more applications (servlet, anyway) have similar architecture. 
Front controller pattern. Different controllers. A tool to figure out how reuqests get mapped to controllers.

Request travels

Front Controller -> Handler mapping -> Handler adapter -> Other controllers -> back to front controller -> To view resolver returns model(data) and a view (how to present the data) and injects data into the tempate to return to the user.


1. Registers controlls with the handler mapping
	- Handler mapping figure sort which URLS need to get sent where and where the requests will go.

2. Handler adapter (like the switch statement) actually sends the request to the proper controller.

3. To controller, service, db

4. Back to front controller which sents it to view resolver

5. Resolves view, injects data to template.

To use the Handler Adapter -> 
	- Use Filters.. Implement a specific class for filters (defined in servlets) and MVC has its own definition of that. Then you register it as a component. 
	-- You have to implement an interface and add the component annotation, then Spring will wire it correctly to the place it needs.  (Just like JpaRepository)


Spring ORM => 
- Cleans up how ORM and session management/ DBs is handeled. 
- Has a SessionFactory/EntityManager *somewhere* that must be referenced all over the place. 
1. Deals with sessions
2. Transaction management - propogation levels - so code bits can be reused.

- Purpose: Remove a lot of pumbing associated with creating/ managing sessions/transactions.

- Hibernate still have some boiler-plate IS getting the stuff with the session.. The context of the session is defined on the method. 
Transactional annotation and propogation level can reuse code that connects to the DB. 

==> Spring Data
- Different from ORM, but it uses ORM.
- Rethinking of how we should work with the database. 
- Replace EntityManager with an interface that brings a more familiar way to talk to teh DB.  At hte core, it has the same Crud Functionality, just more in the WHAT/ HOW things. Hibernate alone can't quite handle that. Fluent language is "just icing on the cake". It's a replacement for SQL, essentially. Simlpe example: Pagination.
----> IDeally contrast with typically OMR. Typical: designed to prodoce object for interacting with DB that isn't deeply connecting with your own entities. 
----? With spring Data, you create an interface and pass the object directly to it. Hibernate's CRUD alone isn't enough. 
HATEOS - HyperText (?) Something. 

--> 





- Spring stuff is a higher level framework so you need to know how the architecture works
=> If you can fully talk about MVC, then it should you know about Servlets as well.

































