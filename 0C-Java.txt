--------------------. ---------------suggested notepad size ------------------->

================================================================================
-----------------------------------  Java  -------------------------------------
================================================================================
Note: To jump to a section, search document for * Title
Sections: 
* Basics 
* Vocabulary
* Getting Started 
* Variables 
* Reference Variables 
* Arrays
* Classes
* Scope
* 4 Pillars of OOP
* Encapsulation
* Inheritence
* Polymorphism
* Abstraction
* Static
* Interfaces
================================================================================
############################# * Basics #########################################
- Java is an object-oriented programming language (OOP) maintained by Oracle.
- Java runs in the Java Runtime Environment(JRE), rather than in a browser.
- Java 10 is the newest version, but Java 8 is the most supported.
- the Java Virtual Machine(JVM) compiles down to bytecode, which is a computer 
  language understood by the Java Runtime Environment(JRE). 
- As developers, we are using a the Java Developer Kit (JDK), a collection of tools 
  which contains the JRE, tools for application, and the JVM.
   _______Your Machine____________________________________
  |  _______________________JDK_________________________  |
  | |  __________JRE__________    ___________________   | |
  | | |    _______            |  | Development Tools,|  | |
  | | |   |_files_|    .....  |  |  javac, java, ect |  | |
  | | |   _________   | JVM | |  |___________________|  | |
  | | |  |Libraries|   -----  |                         | |
  | | |  |___ect___|          |                         | |
  | | |_______________________|                         | |
  | |___________________________________________________| |
  |_______________________________________________________|

 -- Your machine, as a developer, runs the JDK. 
The Development Kit contains some tools for development and the JRE(Java
Runtime Environment), and translates the bytecode into a human-readable form. 
The Java Runtime Environment is the software, and it holds all the files and the 
Java Virtual Machine.
The Java Virtual Machine is the application that runs Java applications or other 
programs which can be compiled with Java.

- "Write once, run anywhere" 
	==> Delevopers can work on their own programs in Java since the 
	runtime environment handles the varying operating systems on its own.
- Java codes begin executing at a main method.
- All java apps are composed of class files, which describe objects.
	== Write class-units of code
	==> You WRITE/RUN classes, and WORK WITH objects
- Java is "strictly typed":
	- Data type MUST be specified when creating variables
	- Variable datatype cannot be changed thereafter.
	- Semi-colons at the end of a line are manditory.
- JVM (Java Virtual Machine) - Runs the java applications and provides the Java 
  runtime environment

>>>>>>>>> Class-unit organization:
1. Package - packages act like folders which isolate code.
	   - name packages in camelCase, but generally just with a single word
2. Classes - classes belong to packages (they live in "folders")
	   - Name classes NOUNS with the FirstLetterAndFollowingWords capitalized.
	   - Classes are "blueprints" that describe how objects operate
	   - Classes MUST ALWAYS contain the following 2 features:
		- the name of the package it is in as the first line:
			package myPackage;
	   	- a public class with the same name as the file
			public class myClass {}
	   	- Classes that are EXECUTABLE must contain a main method
			+ EXAMPLE of a main method

               labels main method ----------v
			public static void main (String[] args) {}
	accessibility-----^             ^--------void means "returns nothing"
                    3 words here ^------^----^-- say this is a CLASS, not object

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<>>><<<<<>>><<<<>>>>>>>>>> * Vocabulary  <<<<<<<<>><><<<<<<<<<<>>>>>>>>>>><><
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

abstract - keyword to define class or method with incomplete or missing 
    definitions. 
    Abstract classes have 1+ abstract methods.
    Abstract methods have missing definitions.
abstraction - only essential details are declared to the user.
    Also, the process of declaring methods without implementation  
    (Used in interfaces)
array - refrence variable that lists the locations (refrences) of
    one or more other variables.
bit - Integer-only data type with 2 possible values, 0 or 1.
boolean - data type supporting only 2 values : true or false
byte - 8-bit data integer, with 2^8 possible values [-2^7, 2^7)
bytecode - computer source code that is processed by a program or virtual
char - 16-bit Unicode character- min val of '\u0000' (0), max '\uffff' (2^16)
class - template for creating and utilizing the properties and behaviors 
	of objects
constructor - block of code, similar to a method, that is called when an
    object is created. Method that initializes an object.
double - 62-bit data precision - Allows decimals.
	Should not be used for precisce values such as currecy
extends - keyword for attaching a subclass to a parent class.
    A class which extends another will inherit the fields and methods of 
    the parent class. A child class may only extend ONE parent class.
Field - a variable inside a class
float  - 32-bit data precision - Allows decimals. 
	Should not be used for precisce values such as currecy
IDE - Integrated Development Environment - program used by software developers
	which can compile and run code.
	machine, rather than by the actual computer's processor.
implement - keyword used to connect a class to an interface.
Inheritance - A new class is derived from an existing class.
Instantiation - Term for creating an actual instance of a class.
    Object created has its own copy of class variables.
int -  32-bit integer. Int operations that would result in a
	decimal will be truncated without rounding 2^24 values, [-2^23,2^23)
interface - Way to acheive polymorphism. Container for static variables
    specific to the interface. Interfaces declare but do not implement
    methods. They signal to the developer to implement methods.
    Classes may implement multiple interfaces.
Java 	- programming language designed for use in distributed environment 
	(java runtime environment), enforcing object-oriented programming model.
JDK - Java Development Kit - Software which contains the compiler, debugger, 
	and development tools which runs on top of the JRE.
 	The JDK translates the bytecode into human readable Java and back. 
JRE - Java Runtime Environment - Also written as Java RTE. It is the
	implementation of the JVM. 
	JRE is essentially the software that runs the JVM application.
JVM - Java Virtual Machine - abstract "machine" with specifications that provide
	a runtime environment that can run Java's bytecode and other programming
	langauges compiled by Java. 
long - 64-bit Integer-only. 
Method - a function.
method signature - part of method declaration that includes the method's
    name and parameter list. Allows for methods to be created by the same
    name, but with different parameters.
new - keyword that creates a new space in the heap memory for data.
Object-Oriented Programming Language - programming language that utilizes the
	concept of "objects".
Objects - Data structures that hold information - data and procedures.
	Objects hold data called Fields (Variables)
	Procedures  are called Methods(Functions)
Oracle - the company that maintains the JRE and JVM.
pass by reference - Useful if 2 vars are in different scopes. If a reference
    is passed into a function, the value at location in which it is 
    referenced is altered.
    If you pass a reference value into a function, it's kind of like just
    pasting the function into your script and replacing the parameters with
    your references; the value referenced to in your working scope will get 
    updated as a result of the function.
pass by value - General structure of java's methods: local parameters are COPIES
   of the original data sent in to the method call.
package - A way to organize java classes into names or modules.
polymorphism - Ability for a class to take multiple forms (IE subclasses)
polymorphic method - method which differs depending on parameters sent to it.
private - method/var only accessible in the class it is created.
public - method/var accessible anywhere inside or outside the class
    in which it is created.
Reference - The location in the memory of a value.
Scanner - Utility object that allows users to get input from the console.
Servers	- A computer or network that hosts and runs applications. Servers send
	 and recieve information to and from users.
short - 16-bit data integer, 2^16 possible values. Range: [-2^15, 2^15)
Static - a constant across all instances of a class.
super - keyword used to call/represent the parent class's method code.
    Used for methods and constructors in subclasses.
this - keyword in methods to refer to the specific object which is calling the
    function.
Value - the value stored somewhere in the memory.

                            -------------------
============================ * Getting Started ================================
                            -------------------
Starting a Java Project in your IDE isn't as cut-and-dry as HTML or CSS was.

1. Inside your Java Project, create a package.
	++ Shortcut - New : Alt + Shift + N 
	- Packages hold classes, similar to how a folder holds files. 

2. Inside that package, create a new "class" file.
	- Name classes with the FirstLetterOfEachWordCapitalized.

	This file should start looking like this:
    ____________________________
	package yourPackage;

	public class YourFile {

	}
    ____________________________
- The "public class YourFile" contains your application code. It MUST be named the 
  same as your file.
- Executable Java files won't run without a main method inside their public class.  
-A main method is NOT required if, for example, your class will be called somewhere
 else such as in a "Launcher" File.

A main method is formatted in the following way:
    ____________________
	public static void main(String[] args){ 
		// Application that runs here
	}
    ____________________
The keywords in here mean the following:
> public - this will be accessible to any function that properly calls it.
> static - this is immutable within the file itself
> void - function without a return value; it is the application so it shouldn't.
> main - Defines it as the MAIN method - the only method that will be read directly
 when this application is compiled.
> String[] args - Delcares the parameter "args" as an array[] of Strings.

                           ========================
  ------------------------------* Datatypes -----------------------------------
                           ========================

+ + 8 Primitive Types in 4 Main Categoties: + +
A. Integer Primitive Type	-	Range of Values:
	1. byte (8-bit integer)		-128 ~ 127 
	2. short (16-bit)		-32768 ~ 32767 [-2^7, 2^7)
	3. int (32-bit)			-2^31 ~ 2^31-1	[-2^31, 2^31)
	4. long (64-bit)		-2^63 ~ 2^63-1	[-2^63, 2^63)
B. Floating Point Primitive
	5. float (32-bit precision)
	6. double (64-bit precision) << Numbers in javascript are 'double'
C. Boolean
	7. boolean - true/false (1 bit)
D. Character Type
	8. char (16-bit unsigned int represented as character)

== Floating Point Numbers do NOT literally represent the data with a number. 
	- Instead, approximates with IEEE 754 standards.
== Integer Division
 - int data can't represent fractions or decimals 
	-- it will just truncate (essentially Math.floor) the result.

== Declaration and assignment must be specific.
	- Assignment must be the literal
	- Certain types require certian literals. 	
     ==	Example ==	       == Default Value == 
   byte myData 	 = 100 			0
   short myData  = 1000			0
   int myData 	 = 10000		0
   long myData	 = 55555555L		0L

   float myData  = 104.1f		0.0f
   double myData = 99.5			0.0d

   boolean myData = true		false
   char myData = 'c'			u\0000 (null)

== Primitives only hold data, and they are not associated with an object.
	- Everything beside data primitives are represented with objects.
	- Primities are a "lower level" than objects in Java
		*** Primitives start with lowerCaseLetters
		*** Objects start with UpperCaseLetters
-- since chars are REPRESENTATIONS of numbers, myChar++ will give you the next 
   character in the numeric set.
-- Math operations can be used directly on primitives in the same was as JavaScript.
	- Math operators: +, -, *, /, %
	- Logical checkers: ||, &&, ==, ^, |, &
	- Control structures - the same except you initialize with int:
		for(int i = 0; i < 5; i++) {}

==> Casting - the process of explicitly converting one type to another.
	- Java supports implicit and explicit type conversion (casting).
	- to Cast, include the type in parenthesis before the value to cast.
	- Casting is required to convert char (has a numerical Unicode value)
	- Boolean has NO NUMERIC REPRESENTATION in Java
	- Downcasting vs Upcasting (numbers)
	  -- Downcasting - represent data with less space allocation
	     (ie 32-bit int to 16-bit short)
	    - the casting operation must be used explicitly for downcasting.
	  -- Upcasting - Represent the data with more space allocation
	    - Can be done explicitly or implicitly
	    - UPCASTING CHART (automatic type conversion):
             byte --> short --> int --> long -->float -->double
__CASTING Example:_________________________
	public static void main(String[] args) {
		// Casting is implicit from int to long.
		int x = 3; //32-bit
		long y = x; //64-bit		
		System.out.println("int x: " + x);  //3
		System.out.println("long y = x: " + y); //3
		
		//This require casting since char & int aren't 
		char q = 'q'; //16-bit unicode character
		int r = (char) q; //32-bit
		System.out.println("char q: " + q); //q
		System.out.println("float r: " + r); //113
			//(113 is the number represented by char q)
		
		// Casting is implicit from int to float, too:
		int a = 3;
		float b = a;
		System.out.println("int a: " + a); //3
		System.out.println("float b: " + b); //3.0f
		
		// You must cast explicitly from float DOWN to int, though.
		float c = 5.4f;
		int d = (int) c;
		
		System.out.println("float c: " + c); //5.4f
		System.out.println("int d: " + d); //5	
	}	
________________________________________________

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
__________________________ * Reference Variables _______________________________
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- Reference Variables point to an OBJECT that is an instance of that class. 
- the DOT operator (.) accesses fields(variables) and methods(functions) in the 
reference object, so long as they are declated in the class type.
- Reference variables point to the object LOCATION, not the OBJECT itself.
- Example : You're online looking at www.middlezero.net.
	Your friend is online looking at www.middlezero.net.
	Your friend has access to www.middlezero.net and changes the homepage.
	You access www.middlezero.net from your computer after changes are made.
	The changes your friend made to www.middlezero.net also come up.
In practice:_____________________________
// Create array. Create another array that points to the same info as the first
	int[] someArr = {1, 2, 3, 4};
	int[] secondArr = someArr;
//Print them both.
	System.out.println("Array 1 start:");
	Arrays.stream(someArr).forEach(System.out::print); 
	System.out.println();
	System.out.println("Array 2 start:");				
	Arrays.stream(secondArr).forEach(System.out::print);
//Change something about only the first array.		
	someArr[0] = 7;
//Print them both.
	System.out.println();
	System.out.println("Array 1 end:");
	Arrays.stream(someArr).forEach(System.out::print); 
	System.out.println();
	System.out.println("Array 2 end:");
	Arrays.stream(secondArr).forEach(System.out::print);
   _______________________________________
Console prints:
	Array 1 start:
	1234
	Array 2 start:
	1234

	Array 1 end:
	7234
	Array 2 end:
	7234

==> Strings are objects, and NOT datatypes.
  -- Note that despite Strings being reference variables (object), when you edit
     a string, you clear and recreate the reference on that specific variable.
  -- Java does NOT support truthy/falsy
	- only booleans & comparisons (< > ==, ect) are evaluated as true/false
   ____________________________
   //Create a string, and make asecond string reference the same location.
	String firstString = "hello";
	String sameReference = firstString;
   // firstString and sameReference now point to location A.
	System.out.println("firstString before: " + firstString);//hello
	System.out.println("sameReference before: " + sameReference);//hello   	    
  // When you edit firstString, you tell it to reference B instead of A.
	firstString = "Goodbye"; // Note only firstString is edited.  
   // firstString now references location B,
   // but sameReference keeps the same refereence location at A ("hello")
	System.out.println("firstString After: " + firstString); //Goodbye
	System.out.println("sameReference After: " + sameReference);//hello
   ____________________________


- Java, ultimately, is a pass-by-value programming language.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[[[[[[[[[[[]]]]]]][[]]][][][][][] * Arrays []]]]]]]]]]][][][][][][][][][][[[[[[
********************************************************************************
- Use arrays in Java generally only when you know how many items it will have.
- Arrays MUST be consistent in size, and calling for an index that it not 
  within the array will CRASH java.
- [] signifies this will be an array.
	char[] arrayName = new char[10];
	char[] alsoArray = {1, 2, 3};

- Arrays are simple examples of reference variables. They are a collection of 
  variable and object references. 

==> ArrayList
-- ArrayList gives more flexibility to arrays. It is an OBJECT.
--To use ArrayList, you must include the location between the package and class
	import java.util.ArrayList;
-- Once the object class is imported, create an object called ArrayList:
		ArrayList myArray = new ArrayList();
The default array length is 10, but it can be changed.
		ArrayList myArray = new ArrayList(20);
--Functionality:
toString()  // Convert the entire array to a String, generally for output:

System.out.println("myArray has the following values:" + myArray.toString());

See the following:
https://www.thoughtco.com/using-the-arraylist-2034204

	myArray.add(10);  // Add element (in this case 10) to the end of array

//If you have already created a string array in Java,
// You can move the existing array into a new ArrayList object.	
	String[] names = {"Bob", "George", "Henry", "Peter", "Steven"};
	ArrayList dynamicStringArray = new ArrayList(20);
	dynamicStringArray.addAll(Arrays.asList(names));

==> Array dot operator
	- You can access information about the array with the dot operator:
	myArray.length();
==> Arrays of Arrays: Multidimensional Arrays:
	- It is possible to have arrays inside arrays 
	- This can be useful for charts and representing scientific data.
	To declare a multidimensional array:
	int[][] myArray = new int[3][2];
	OR
	int[][] myOtherArray = {{1,2},{2,4},{3,6}};


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
}}}}}}}}}}}}}}}}}}}}}}}}}}{ * Classes  }{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
- Classes structure and describe things. They are blueprints for objects.
- Objects are instances of classes.
- An object (or instance of the class) would be an animal.
	- Objects have an "is a(an)" relationship with their class.
	- a Dog (object) is an animal (class)

-In java, everything but primitives are objects, which are insances of a class.

-Classes define two things about the object:
	1. State	(Variables)
	2. Behavior	(Functions/Methods)

Creating a class:
>> Make a new file named what you'd like your class to be named.
	public class Animal { ... }

>> To Declare instance variables:
___
	String name;
	int legsCount;
__
-- Each instance of the class will have these varialbes available
-- Each instance of a class decides what to assign the instance variables.

>> Static Fields
	static boolean onEarth = true;
-- All instances of the class will share the same value for a static field.

>> Declaring a method requires specific data:
 	1. AN access modifier: [public, protected, (default), private]
		Note: Default may also be called package-private
	 2. A return type of void if no return.	
	 3. Method name
	 4. Method parameters (type name)

- In using class methods, a object will reference itself with the keyword this.
   - the following method will return the assignment of the "name" instance
     variable for the object that of that class that calls the method.
	public static void getName(){
		return this.name;
	}

- Class files that describe a the structure of objects do not need to be 
  executable, therefor they do not need a main method.

~~~ See the class example Animal.java (file without a MAIN) we have a method
    that is available to objects of the Animal class.
___
public void move() {
	System.out.println("The " + this.name + " Animal Moves around")
}
___

~~~ See LAUNCHER.java, within the *same package*:
___
public class Launcher
	public static void main(String[] args){
	// Instantiation of an object
	Animal myAnimal = new Animal();
	myAnimal.name = "wallaby";
	myAnimal.legCount = 2;
}
___

>> Constructors are blocks of code - similar to methods- 
   that initialize an object upon it's creation. 
  - You can have different constructors for different parameters as well.
  - Requirements:
	- You are not required to provide one
		- If no constructor is provided, default no-argument constructor
		  of the Object class will be called
	- The name of the constructor is the same as the name of the class
	- Declared as public, protected, or private (default is public)
	- Whether or not parameters will be used(if arguments must be passed in)

==> Creating an object that is an instance of a class:
- Objects are created in two steps. 
- Lets say you have a Dog class file in your package and want to create a dog.
- First, you will initialize the object named myDog as a Dog object.
	- This is just like how you initialize a variale as int or long
		int x;      OR       long y;
	     	Dog myDog;           Cat z;
- Instantiate the object, which means you will tell it which constructor to run.
		myDog = new Dog();
 new ~ allocates memory--^   ^------- a Dog() constuctor without arguments.
- This can all be done in a single line as well:

      class   .---Object keyword/placeholder name
        V     V
	Dog myDog = new Dog();
           .-------------^
	 calls constructor method to instantiate this Dog class object

################################################################################
                                 * Scope
################################################################################
Scope Chapter References: 
	https://www.geeksforgeeks.org/variable-scope-in-java/
	http://mindprod.com/jgloss/scope.html#CLASS
	https://www.tutorialspoint.com/java/java_variable_types.htm
- Java uses block-level scope. This section addresses two categories:
	class level scope and method scope
	-  However, keyword modifiers also identify variables accessibility
	   in package, subclass, and public scopes.
- Scope determines where in the program the variable is accessible.
	- Java is lexiecally (statically) scoped.
- Scope is determined at compiling time
	- IE  To assign a variable, it must declared first. 
	- Note that wasn't the case in JavaScript if you used the var keyword.
- Generally, {curly brackets} define a scope ~ variables will be accessible to
  methods or operation within that same scope.

==> Class Level Scope
	- Variables declared INSIDE a class and OUTSIDE any function.
    See chart for accessibility by keyword:
  .------------------------------------------.
  |  Modifier     Package   Subclass   World |
  |  -------      -------   --------   ----- |
  |  public         yes      yes        yes  |
  |  protected      yes      yes        no   | (not available outside package)
  |  Default        yes      no         no   | (No keyword)
  |  private        no       no         no   | 
  '------------------------------------------'
-----> Instance Variables
	- Declared within a class, but outside a method, constructor, or block.
	- Can be declared before or after use 
		(in class scope before or after main function)
 	- Created with use of keyword new, destroyed when object is destroyed
	~ Something that an instance of a class would have.
-----> 	Static Variables
	- Static variables are shared across ALL instances of a class.
   _____Example, a static variable for a "dog" might be:
	   static boolean hasBrain = true;
   _____ 
	- All Dog()s hasBrain field will be true.
	- if you decide one Dog() hasBrain = false, all dogs wiill as well.

==> Method-Level Scope
-----> Local Variables / Method-level Scope
	- Variables declared inside a method have method-level scope 
	- they cannot be accessed outside the method.
	>> They do not exist after the method runs.
 	>>  "this" keyword differentiates between local and class variables.
	~ Something to be used in a method as a parameter
___Example:(Guess the result!)_________________________
	public class Test 
	{ 
	    static int x = 11; 
	    private int y = 33; 
    	public void method1(int x) 
    	{ 
	        Test t = new Test(); 
        	this.x = 22; 
        	y = 44; 
  
	        System.out.println("Test.x: " + Test.x); 
        	System.out.println("t.x: " + t.x); 
        	System.out.println("t.y: " + t.y); 
        	System.out.println("y: " + y); 
    	} 
  
	    public static void main(String args[]) 
	    { 
	        Test t = new Test(); 
	        t.method1(5); 
	    } 
	}
___________________________________________ 
__OUTPUT:_____________
	Test.x: 22
	t.x: 22
	t.y: 33
	y: 44
______________________


>>>>>> See reference page to run examples or for more information:<<<<<<<<<
http://mindprod.com/jgloss/scope.html#CLASS
https://www.geeksforgeeks.org/variable-scope-in-java/
https://www.tutorialspoint.com/java/java_variable_types.htm
================================================================================
||||||||||||||||||||||||| * 4 Pillars of OOP |||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
( Search keywords :
 * Four Pillars of Object-Oriented Programing * Pillars of Java )
-Object-Oriented Programming, OOP, refers to a programming development in which
  we have methods that are applied to the data within objects.
	- "Structured Programming" like JavaScript applies procedures to the
	  entire set of accessible global data.
- OOP = take the engine apart
	work with the pieces independantly
	pull all together as the application
- Structured = work directly on the car 
	have problems when using the welder right next to the gas tank
- the 4 Pillars are the requirements a language must meet to be called OOP

1. Inheritance:
      > Optimizes production time: developer can create a blueprint (class)
	-- The pillars themselves are an example of inheritance: 
		= C outlined the requirements for OOP
		= Java, an instance of the OOP class of programming, took the
		  pillars and applied them as a blueprint for the language
	- Has the ability to extend the behavior of a class to a subclass, 
	  building upon existing code and providing more exacting definition. 
	- Used by extending classes.

2. Encapsulation:  
     > Provides levels of security so the consumers don't break the code
	-- Example: when Java runs your code and returns something, you know it
	   is doing what you told it to, but maybe not exactly HOW.
	-- black-box: when you say console.log("whatever"), and the console
	   replied "whatever," you don't know HOW it moved the text there, but
	   you know that keyword console.log("whatever") did the trick.
	- Encapsulation is the hiding of data. 
	- It is the process of a class encapsulating its own state 
	  and only exposing ways of changing state through outs own methods. 
	- Used through: Private fields and getters/setter pattern.

3. Polymorphism:
  > Despite the "American Dream" stereotype, not all families have 2.7 kids, 
    a house in a suburbs, and a white picket fence...
    But people do have their own version of "home" and "family"
	- Polymorphism means 'many forms'
	- In OOP: using the same terms(methods) with differing implementations.
    -Forms of Polymorphism:
	1. Overriding - change a method for a particular subclass
	2. Overloading - Having multiple definitions for the same functions,
			but with different parameters.  
 	   Overloading is also possible on constructors.

4. Abstraction - 
  > Represents the fields/methods an object has without defining them.
	-"What, not how" 
	-Abstract classes and interfaces give us access to forms of abstraction.
	-An abstract class is a class that cannot be instantiated*, 
	and can have abstract methods. 
		- These are methods with a definiton, but no implementation.
	- They set behavior at a higher level.
	- You must implement bahavior of methods if they haven't been set yet.
	- Implies heirarchy
	- Example: All electronics may have an abstract "TurnOn()" method
	  but refrigerator.TurnOn(); would be different from tv.TurnOn();


http://mrbool.com/the-4-pillars-of-object-oriented-programming-in-java/33900


(((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))
((((((((((((((((((((((((( * Encapsulation   )))))))))))))))))))))))))))))))))))
))))))))))))))))))))))))))))))))))))))((((((((((((((((((((((((((((((((((((((((((
- Encapsulation is also known as data hiding. In java, it allows developers to
  wrap certian sets of data such as fields and methods into a unit together
  and decide what other files can use them. 
- Enforced by access Modifiers and getter/setter patterns and accessor/mutate.
	Access Modifiers:
	- public  - Accessible Anywhere 
	- protected - Accessible within package or subclass 
	- (Default) - Only accessible within same package
	- private - Only Accessible within the class
Example:
 - public > restrooms unlocked at a public park. (Anyone can use them)
 - protected > Employee-only Restroom (for those who WORK there)
 - default > restroom at a restraunt (for patrons)
 - private > restroom at your master bedroom (only for you)

==> Getters and Setters (once varialbes are declared, press alt+shift+s)
	- Getters and setters ordinary functions in Java, but they are used in 
	  encapsulation. Within the class, when a class variable is declared, 
	  methods can be created to assign(set) or retrieve(get) the value.
	- This allows the user to set or get the implenemtation without changing
	  the code that uses the object.
Example:
_____________
public String getTexture(){
	return texture;
}
public void setTexture(String texture) {
	this.texture = texture;
}

public Waffle(String texture, boolean glutenFree, float cruchiness) {
	super();
	this.texture
}
____________

WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
xxxxxxxxxxxxxxxxxxxxxxxxxxxx * Inheritance  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
- INHERITANCE is a pillar of object-oriented programming.
- It is the idea and behavior of reutilizing class definitions by extending 
  them to provide more detailed implementations.

- For instance we could create a more generic class called computer and extend 
  computer to create more specifid implementations such as 'DesktopComputer' and 
  "LaptopComputer"

-When inheriting a class, the inheriting class can utilize all of the inherited 
 classes fields and methods, although the access modifiers must still be respected.

- Exerything in java must be inherited from another class.

KEYWORD >> "extends"
	- This identified which class your new class will inherit.
	- 'extends' essentially translates to "is a(n)", 
	   but with more specific classes.

>> Default constructor 
- Constructor that every class is provided if and only if it has no other.
-- Classes get default constructor if and only if they have no default.
-- Default constructor DOESN'T TAKE ANY arguments.
- See Classes for more on constructors.

////////////////////////////////////////////////////////////////////////////////
 :::::::::::::::::::::::::: * Polymorphism :::::::::::::::::::::::::::::::::::
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 - The ability for an object to take many forms.
 - More common use : 
	>when a parent class reference is used to refer to a child class object
 - A child should be an instance of the parent
	>> a Dog is an Animal
	>> a Laptop is a Computer

 - Conditions:
	1. Object type Must have an is-a(n) relationship with the reference 
	   - Object will only get methods/vars gaurenteed to be it's type
	2. Reference Type cannot be more specific than the Object Type.
	Example: If you say 
		Animal myPuppy = new Dog();
	- Your myPuppy won't inherite the Dog() class bark() method, but it will
	  have the eat(); function overridden the same as the Dog() class.
	> It's wrong because "animal is a dog" is incorrect logic.
        >> Variable / field can hold anything that is considered of that type, 
        however, we only have access to information defined on the type the field or 
        variable is defined with, not the actual content of the field/variable.


KEYWORD >> "instanceof"
	- reurns true if object is of that class. 
	- Works for specific and broader categories.

		Chihuaha ________      Chihuahua instanceof Dog == True
             instance of         |             &&
     		|                |     Chihuahau instanceof Animal == True
                V                V          
              Dog instance of Animal  == True



@Override
Override - redifined the behavior of a method -- You can change the functionality for
your specific objects.



                   ********* Important Note **********
=>> toString method 
	- is a default method that outputs the location refernced by an object.
	- inherited method. Even if not defined, it is present because it is
	 inherited to the Object class, in which every class is explicitly.
	- toString is called when the object name is passed to a println method
	- To get the actual values of the object, the toString() method must
	  be Overridden.

==> Super keyword
	super.someMethod(); 
	- Calls the super-class of the method (the parent's version) instantly
	- Pass arguments into super the same way they would be passed into the
	  method or construction of the parent class's version of that method.
	- Often used in polymorphism to expand on the parent's function.
==> Final Keyword
	Used as the "final form" to stop mutations (limits polymorphism)
	- Methods: Cannot be changed/overridden
	- Primitive variables cannot be modified
	- Reference variables cannot be changed
	- Final classes cannot be extended.

	
 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
                              * Abstraction
 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

 - Abstraction is the process of laying out a blueprint for classes.
 - Abstract methods must be overriden for the program to execute.

==> Abstract Keyword
	- Means incomplete/ mission definition
	- Cannot be instantiated
	- Any class with abstract method must be declared as abstract
	- Classes cannot run if they are abstract.
	- It a subclass inherits an abstract class, it must 
	  override all abstract methods

%^&*&^%^&^%^&^%&*^%&%^%&^%&^%&^%&^%&^%&^%&^%&^%&^%&^%&%^&^%&^%&^%&^%&^%&^%&^%&^
      ....................... * Static .......................................
&&%^&^%^&^%&^%&^%&^%%^&%^&%^&%^&%^&^%&^%&^%&^%&^%&^%&^%&^%&^%&^%&^%&^%&^%&^%%^&
Recall:
Class - a blueprint for an object - the outlines that describes something.
Object - An instance of a class, a specific set of data in the form of 
	variables and methods.

- Fields and methods are generally accosiated with OBJECTS.
- STATIC, however, is associated with CLASS.
	- Static is generally used for utility.
- Objects all will point to the same "static" value in a class - they are shared.
	- the 'this' keyword has no context in static methods.

==> 3 Important uses and results:

  1. - For fields and variables, Final is essentialy a constant.
     - For primitives - final value can't be changed
     - For refrence types (objects) it means the reference cannot be changed.

  2. For methods, final dictates that the method cannot be overridden.

  3. For classes, final dictates the class cannot be extended

  = = Field is basically a variable within an interface.
  = = Any fields declared on interface are: public static final
  = = All methods on an interface are implicitly abstract.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;; * Interfaces ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- Interfaces in Java are used to acheive polymorphism.
- Interfaces are used to guarantee availibility of methods in implementation
	- All methods are public or abstract
	- All variables are public static final
- A class that implements an interface must provide an implementation for every
  interface method, or else be considered an abstract class.

How to use Interfaces:
	1. Create an interface with static variables and/or method definitions
	2. Create a class that implements the interface(s)
	3. Provide definitions for all abstract methods within the interface
	4. Instantiate an object that is of the class which implemented 
	  the interface.
	5. Use methods through/on the object.

==> Interface and Inheritence
- No state/behavior inherited
- Have "type" inheritence. A class that implements an interface is
  polymorphically considered an instance of the inheritence.
- Name interfaces by ADJECTIVES or VERBS.
- Interface describes BEHAVIORS a class should have and provides a name
	EX: Runnable, Serializable, Functional, ect

==> Once a java class implements an interface, you can use an instance of that 
  class as an instance of that interface. 

==> implements keyword
- Classes can implement multiple interfaces.
- Interfaces can extend other interfaces
- For interfaces, all classes with the interface must define all methods 


==> Default methods :
 - In modern java (8+), it is possible to get a default method incase the user
   of a package does not override all of the classes.
  	- However: if a default method is not defined, classes which inherit an
	  an astract method will be considered abstract classes, and they will 
   	  not function at all.
 - Default methods allow you to add new functionality to existing interfaces 
   without crashing all classes associted with the interface prior to the
   update.

>> Interface can have a static method without creating an instance of that class
	- static method only calls other local static methods
	- Static interface methods cannot call other interface methods 
	  that are not also static or default.

==> The Diamond Problem/ Solution
  - The Diamond problem is a hypothetical solution, not possible in Java.
	For more details see:
	 https://www.journaldev.com/1775/multiple-inheritance-in-java
    Lets say you create a class C which inherits(extends) two other classes A&B
	+ The two classes (A&B) extended a single class SuperClass
		+ SuperClass contained one abstract myMethod();
	+ Both of the classes implemented the method myMethod();
	+ The child class of A & B attempts to use myMethod
	>>>Result : The compiler doesn't know which myMethod to run!!

	    SuperClass
	       / \              The Diamond Problem
	      /   \            =====================
     	     /     \           
        ClassA	    ClassB          Solution to this in Java is interfaces.
  	    \       /           Since methods are not defined in interfaces,
             \     /         a class can implement multiple interfaces and 
	      \   /        give only one definition to the required methods.
	      ClassC

 
 - It is up to the developer to avoid or handle overlapping method declarations
   when implementing multiple interfaces into a class.