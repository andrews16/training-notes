=====================================================================
			Week D : More on Java
=====================================================================
Topics: 
* Scanner
* Try-catch
* Other 
* Stack Trace
* Stack vs Heap
* String Manipulation
* Comparing Strings
* Utility Methods
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			* Scanner - Object
 Parse primitive types and strings using regular expressions.
 Breaks input into tokens w/ delimiter pattern 
	- Split string based on whitespace (default)
	- Can .useDelimiter(char) to define where to split input
 - Converts input w/ .next methods.
	.nextInt()
	.nextChar/Long/Float/(other PRIMITIVE)
	.nextLine()  <= for Strings.
 - InputMismatchException <= error thrown if input incorrect,
	can be caught(retrieved/skipped) later.

 Mitch Tip : It's better to have 1 static scanner to use for 
	     all user input than to have multiple scanners.

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		  	* Try-catch block
Try-Catch Vocabulary:
try - area for "dangerous" code, either in testing or code prone to
	exceptions, that you want to run. 
Exception - Inturruption in normal program flow - generally a signal
	that the code has failed, but it is recoverable.
throw - the instance of an exception showing up. 
	The program will "throw" the exception - by default, the JVM
	will abort and stop running, but if there is a "catch"
	statement to handle the issue, the program can continue.
catch - how the code will handle the error. 

Try-Catch 
==> Use a try-catch statement on a block of code which may be have the  possibility of throwing an exception. 
- Provide handling instruction in the 'catch' section in the case 
 that an exception comes up. The "try" sactin actually catches the
 error, and then it is passed to the catch section to handle it.
- Useful especially in instances that depend on external sources:
	- User Input
	- APIs/sending/gathering data from online/external source
==> Catch blocks require a try statment above them and a specified 
	exception type in order to be run.
	- General catch(Exception e) can be run as well for other
	unexpected errors.
- Multiple catch blocks can be used with different exceptions.
	- To do this, add the exception name in parenthesis:
		try{...}
		catch(ExceptionType name){
		}
		catch(OtherExceptionType name){
		}
	- the same catch block can be used to resolve more than one
	exception with the | single vertical bar:
		catch(IOException|SQLException ex) {}

==> Finally block always executes when the try/catch block exits.
	- Runs wheter or not an exception occurred.
	- Ensures execution even if unexpected exception happens.
	- Finally block is optional.

Syntax:______________
try {
	//code
} 
catch() {
	//code
}
finally{
	//code (finally is optional)
}

=====================================================================
			* Other Stuff
=====================================================================
==> Remember to add comments 
Adding comments starting with /** before a function will show that
 section when you hover over the function in other classes.

==> Alt + Shift + S >> Generate (things) such as constructors and
		       setters/getters.

==> printf 
- Used to print variables. 
- Does not by default create a new line.
	system.printf(...);
- Has a specific syntax for different data types and certian chars.
SEE:
https://alvinalexander.com/programming/printf-format-cheat-sheet

=====================================================================
			* Stack Trace
=====================================================================
 - "Exception in thread "main" java.lang.RuntimeException
	- Tells you exactly what error occurred and what called the
function that caused the error to happen.
 - See Stack vs Heap
/////////////////////////////////////////////////////////////////////
		       * Stack vs Heap
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 - Stack and Heap are the words to define two different locations 
  in which Java stores memory.

====> Heap Space
- Allocates memory to OBJECTS and JRE classes. 
- New objects ALWAYS in heap
- String pool is part of the heap.
- Heap memeory - used globally - complex management.

====> Stack Memory
- Used for execution of an application.. Short-lived memory. 
- Contains method-specified values (such as copies of primities run
  through a function) and references to other objects in the Heap.
- Stack contains local primitives variables and refrences variables.
- Memory management Last-in-First-out(LIFO) handling order. 
	- New method called will end before the method that 
	called it ends. 
Example: I go to the kitchen to cook.
	I start chopping up the vegetables
	While chopping veggies, I drop an egg.
	I need to clean the egg before I finish chopping veggies.
	I need to finish chopping veggies before I continue cooking.
	Then the main cooking method continues from there.
	_________________________
	public static void main(String[] args){
		chopVeggies();
		cutMeat();
		// Whatever else.
	}
	public static void chopVeggies(){
		//Chop stuff
		if (I made a huge mess){
		cleanMess();
		}
		//Keep chopping stuff.
	}
	public static void cleanMess(){
		Attempt to Clean the mess		
	}
	__________________________
Lets say there's a HUGE problem when I'm cleaning the egg.
I knock the paper towels into the stove. 
A fire starts as a result of my cleaning of the egg. 
(Its a stretch, I know. Use your imagination)
I'm going to abort the whole cooking thing because:
[[This is the "Stack Trace"]]
Fire in main kitchen
	you started cleaning a mess cleanMess(); (line 13)
	while chopping veggies chopVeggies()(line 9)
	which was called in the main method (line 2)
		


=====================================================================
		     * String Manipulation
=====================================================================
- String are immutable; the value of a string in the memory cannot be
 changed. All String methods return new Strings -- they don't alter
 the old ones. 
-There is no way (barring reflection) to alter an existing String,
 only create a new one.

	~~~~~~~~~~~~~~~Example OSA problem:~~~~~~~~~
		What does the following print?
	______________________________
	String myString = "hello world"
	myString.substring(0,5);
	System.out.println(myString);
	_______________________________
Answer : hello world					
Explaination: For Strings, if there is no assignment, nothing will
 change! Since strings cannot be changed, the function creates a 
 new String rather than alter the value in memory.
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Important methods:
>> Substring : 
	    .substring(int) / .substring(int,int) 
- Method located on the String Class which allows us to extract
  subsections of the String as their own String. 
- 2 overloads:
.substring(int startingIndex);
.substring(int startingIndex, int endingCharacter);

==> .substring(int startingIndex) will return a string that starts
   at the chosen index and continues to the end of the string.
  - startingIndex ranges from 0 to str.length()-1

==> .substring(int startingIndex,int endingCharacter)
  - Practice with this; the endingCharacter integer is exclusive-of,
   and has a range of 0 to str.length(). 
  - endingCharacter = 0 will result in an empty string every time 
   (assuming no error) because it is EXCLUSIVE of the 0th index.
  	> Clay's note: I look at it as "take the nth character of" 
	so if I want to get "rad" out of "my radio", I would use:
		"my radio".substring(3,6);
	because the last letter of "rad" in "my radio" 
	is the 6th letter of the String.
      
>> CharAt :
	 .charAt(int x)
- Returns the char at the given index within the String.
- int x has a rang of 0 to myString.length()-1
Note: In JavaSCRIPT it returned a string. 
      In Java it returns a primitive char.
**Important** 
	- char literals have single quotes
	- String literals have double quotes.

>> Length:
	.length()
- This is more of a utility, but it is an important method.
**Important**
- Strings: myString.length() is a METHOD. Use parenthesis.
- Arrays: myArray.length is a FIELD. NO parenthesis for array length.

=====================================================================
			* Comparing Strings
=====================================================================
      	         	Strings are objects, 
         	thus this section also appies to objects

Recall:
In JavaScript, there are 2 ways of comparing values: 
1.) == Equality - Leveraged type coercion ie '3' == 3 TRUE
2.) === Equality - No type coerion. '3'=== 3 is FALSE

Similarly, Java has 2 ways to comparing objects.
1.)  == Operator : for primitives, this compares VALUES.
   		   for objects this compares REFERENCES.
2.) .equals(Object) Method : Content comparison

- Primitives, even as an object's instance variable (field) 
  can be compared with the == operator since primitives point to
  a value rather than a location.
- Strings assigned to a variable are stored in the string pool.
  However, if we make a string via string manipulation, the string     WON'T show up in the String Pool unless it is assigned to a field.

- .equals() method compares object equality more flexibly. 
	- .equals() method is provided by the object class;
	  it is accessible on any object.
	- By default on the Objects >> myObject.equal(otherObject)
		.equals compares refrences the same as ==.
		2 objects will only be equal is you declare a second
		and assign it to the variable holding the first.
		Example:
		myObject cat = new myObject("cat");
		myObject sameCar = cat;
	- .equals() CAN be overridden to compare specific fields or
	anything that would make two objects equal.
	Example:___________________________________________
	public boolean equals(myObject obj) {
		if (this.name.equals(obj.name)) return true;
		return false;
	}
	___________________________________________________

- For strings it is by default overridden to compare the individual
 characters and return true if and only only if (IFF) the strings
 represent the same sequence of characters.

=====================================================================
		====> * Utility methods <====
=====================================================================
		    ~~~ String Editing ~~
.trim() 
-- removes blank spaces at either side of the string.  
   (Removes any leading or trailing spaces.)

.concat(" plus this")
-- Concatenate (add 2 strings together.)

.replace(char old, char new);
-- Replace a character with something else
-- Can replace old character, IE "." with an empty string ""
   if you want to remove a particular type of character.

.replaceAll(String old, String new);
-- .replace but you can use strings.
	-- This has an overflow where the first string is regex,
	   but regex(regular edxpression) isn't covered here.

.toLowerCase()
.toUpperCase()
-- Changes entire string to UPPER or lower case.

		   	~~ Boolean ~~
.contains()
-- Simple way to see if a string contains a sequence of characters
-- Returns boolean true/false
-- Case- Sensitive
  >> Use .toLowerCase or .toUpperCase if neccessary

.equalsIgnoreCase("STRING")
-- STRING method... Does exactly as above, but simpler.

.endsWith("try")
.startsWith("String")
-- See in the string endsWith or startsWith the given characters.
